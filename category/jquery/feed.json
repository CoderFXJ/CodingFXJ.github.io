{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"jquery\" category",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/06/16/AJAX/",
            "url": "https://codingfxj.github.io/2021/06/16/AJAX/",
            "title": "AJAX",
            "date_published": "2021-06-16T07:57:12.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"AJAX-的使用\"><a href=\"#AJAX-的使用\" class=\"headerlink\" title=\"AJAX 的使用\"></a>AJAX 的使用</h3><p>Ajax特点是<code>无需刷新页面便可向服务器传输或读写数据</code></p>\n<h4 id=\"创建⼀个-ajax-对象\"><a href=\"#创建⼀个-ajax-对象\" class=\"headerlink\" title=\"创建⼀个 ajax 对象\"></a>创建⼀个 ajax 对象</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IE9及以上</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\"><span class=\"comment\">// IE9以下</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">&#x27;Mricosoft.XMLHTTP&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"XMLHttpRequest-对象属性描述\"><a href=\"#XMLHttpRequest-对象属性描述\" class=\"headerlink\" title=\"XMLHttpRequest 对象属性描述\"></a>XMLHttpRequest 对象属性描述</h4><p><img src=\"AJAX.assets/20210621030002.png\" alt=\"\"></p>\n<h4 id=\"配置链接信息\"><a href=\"#配置链接信息\" class=\"headerlink\" title=\"配置链接信息\"></a>配置链接信息</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\"><span class=\"comment\">// xhr 对象中的 open ⽅法是来配置请求信息的</span></span><br><span class=\"line\"><span class=\"comment\">// 第⼀个参数是本次请求的请求⽅式 get / post / put / ...</span></span><br><span class=\"line\"><span class=\"comment\">// 第⼆个参数是本次请求的 url </span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数是本次请求是否异步，默认 true 表示异步，false 表示同步</span></span><br><span class=\"line\"><span class=\"comment\">// xhr.open(&#x27;请求⽅式&#x27;, &#x27;请求地址&#x27;, 是否异步)</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;./data.php&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"发送请求\"><a href=\"#发送请求\" class=\"headerlink\" title=\"发送请求\"></a>发送请求</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\">xhr.open(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;./data.php&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 使⽤ xhr 对象中的 send ⽅法来发送请求</span></span><br><span class=\"line\">xhr.send()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果想要拿到响应，我们需要有两个前提条件</p>\n<ol>\n<li>本次 HTTP 请求是成功的，也就是我们下面要说的 http 状态码为 200 ~ 299 </li>\n<li>ajax 对象也有自己的状态码，用来表示本次 ajax 请求中各个阶段    </li>\n</ol>\n</blockquote>\n<h3 id=\"AJAX-状态码\"><a href=\"#AJAX-状态码\" class=\"headerlink\" title=\"AJAX 状态码\"></a>AJAX 状态码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readyState === <span class=\"number\">0</span> : 表示未初始化完成，也就是 open 方法还没有执行 </span><br><span class=\"line\">readyState === <span class=\"number\">1</span> : 表示配置信息已经完成，也就是执行完 open 之后 </span><br><span class=\"line\">readyState === <span class=\"number\">2</span> : 表示 send 方法已经执行完成</span><br><span class=\"line\">readyState === <span class=\"number\">3</span> : 表示正在解析响应内容</span><br><span class=\"line\">readyState === <span class=\"number\">4</span> : 表示响应内容已经解析完毕，可以在客户端使用了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个 ajax 对象中有一个成员叫做 xhr.status</span><br><span class=\"line\">这个成员就是记录本次请求的 http 状态码的 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"readyStateChange\"><a href=\"#readyStateChange\" class=\"headerlink\" title=\"readyStateChange\"></a>readyStateChange</h4><p>监听 ajax 对象的 readyState 值改变的的行为，readyState 的值发生变化了，那么就会触发该事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest() xhr.open(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;./data.php&#x27;</span>)</span><br><span class=\"line\">\txhr.send()</span><br><span class=\"line\">\txhr.onreadyStateChange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 每次 readyState 改变的时候都会触发该事件</span></span><br><span class=\"line\">\t<span class=\"comment\">// 我们就在这里判断 readyState 的值是不是到 4</span></span><br><span class=\"line\">\t<span class=\"comment\">// 并且 http 的状态码是不是 200 ~ 299</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (xhr.readyState === <span class=\"number\">4</span> &amp;&amp; <span class=\"regexp\">/^2\\d&#123;2|$/</span>.test(xhr.status)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 这里表示验证通过</span></span><br><span class=\"line\">\t<span class=\"comment\">// 我们就可以获取服务端给我们响应的内容了 &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>GET 还是 POST优缺点</strong></p>\n<p> 无法使用缓存文件（更新服务器上的文件或数据库）<br> 向服务器发送大量数据（POST 没有数据量限制）<br> 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p>\n</blockquote>\n<h4 id=\"get请求\"><a href=\"#get请求\" class=\"headerlink\" title=\"get请求\"></a>get请求</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\"><span class=\"comment\">// 直接在地址后面加一个 ?，然后以 key=value 的形式传递 // 两个数据之间以 &amp; 分割</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">&#x27;get&#x27;</span>, <span class=\"string\">&#x27;./data.php?a=100&amp;b=200&#x27;</span>)</span><br><span class=\"line\">xhr.send()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"post-请求\"><a href=\"#post-请求\" class=\"headerlink\" title=\"post 请求\"></a>post 请求</h4><p>参数是携带在请求体中的，所以不需要再 url 后面拼接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest() xhr.open(<span class=\"string\">&#x27;post&#x27;</span>, <span class=\"string\">&#x27;./data.php&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1. 创建 ajax 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest()</span><br><span class=\"line\"><span class=\"comment\">// 2. 配置请求信息 xhr.open(‘GET’, ‘./test.php’, true)</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 发送请求 xhr.send()</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 接受响应 xhr.onload = function () &#123;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xhr.responseText) &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"AJAX封装\"><a href=\"#AJAX封装\" class=\"headerlink\" title=\"AJAX封装\"></a>AJAX封装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            /*</span><br><span class=\"line\">                type 代表 请求方式</span><br><span class=\"line\">                url  代表 请求url路径</span><br><span class=\"line\">                data 代表 发送数据</span><br><span class=\"line\">                success 代表 下载数据成功以后执行的函数</span><br><span class=\"line\">                error   代表 下载数据失败以后执行的函数</span><br><span class=\"line\">            */</span><br><span class=\"line\">            function $ajax(&#123;type = &quot;get&quot;, url, data, success, error&#125;)&#123;</span><br><span class=\"line\">                var xhr = null;</span><br><span class=\"line\">                try&#123;</span><br><span class=\"line\">                    xhr = new XMLHttpRequest();</span><br><span class=\"line\">                &#125;catch(error)&#123;</span><br><span class=\"line\">                    xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if(type == &quot;get&quot; &amp;&amp; data)&#123;</span><br><span class=\"line\">                    url += &quot;?&quot; + querystring(data);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                xhr.open(type, url, true);</span><br><span class=\"line\"></span><br><span class=\"line\">                if(type == &quot;get&quot;)&#123;</span><br><span class=\"line\">                    xhr.send();</span><br><span class=\"line\">                &#125;else&#123;</span><br><span class=\"line\">                     //设置提交数据格式</span><br><span class=\"line\">                    xhr.setRequestHeader(&quot;content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class=\"line\">                    data ? xhr.send(querystring(data)) : xhr.send();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">                    if(xhr.readyState == 4)&#123;</span><br><span class=\"line\">                        if(xhr.status == 200)&#123;</span><br><span class=\"line\">                            if(success)&#123;</span><br><span class=\"line\">                                success(xhr.responseText);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;else&#123;</span><br><span class=\"line\">                            if(error)&#123;</span><br><span class=\"line\">                                error(&quot;Error：&quot; + xhr.status);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            function querystring(obj)&#123;</span><br><span class=\"line\">                var str = &#x27;&#x27;;</span><br><span class=\"line\">                for(var attr in obj)&#123;</span><br><span class=\"line\">                    str += attr + &quot;=&quot; + obj[attr] + &quot;&amp;&quot;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return str.substring(0, str.length - 1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            window.onload = function()&#123;</span><br><span class=\"line\">                var aBtns = document.getElementsByTagName(&quot;button&quot;);</span><br><span class=\"line\">                /*</span><br><span class=\"line\">                    当我们下载完数据以后需要对数据的处理方式不一样</span><br><span class=\"line\">                    【注】$ajax，我们需要按照传参的顺序，依次传入我们的参数。</span><br><span class=\"line\">                */</span><br><span class=\"line\"></span><br><span class=\"line\">                aBtns[0].onclick = function()&#123;</span><br><span class=\"line\">                    $ajax(&#123;</span><br><span class=\"line\">                        url: &quot;code14/1.get.php&quot;,</span><br><span class=\"line\">                        data: &#123;</span><br><span class=\"line\">                            username: &quot;小明&quot;,</span><br><span class=\"line\">                            age: 18,</span><br><span class=\"line\">                            password: &quot;123abc&quot;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        success: function(result)&#123;</span><br><span class=\"line\">                            alert(&quot;GET请求到的数据：&quot; + result);</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        error: function(msg)&#123;</span><br><span class=\"line\">                            alert(&quot;GET请求数据错误：&quot; + msg);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                aBtns[1].onclick = function()&#123;</span><br><span class=\"line\">                    $ajax(&#123;</span><br><span class=\"line\">                        type: &quot;post&quot;,</span><br><span class=\"line\">                        url: &quot;code14/2.post.php&quot;,</span><br><span class=\"line\">                        data: &#123;</span><br><span class=\"line\">                            username: &quot;小花&quot;,</span><br><span class=\"line\">                            age: 18,</span><br><span class=\"line\">                            password: &quot;123abc&quot;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        success: function(result)&#123;</span><br><span class=\"line\">                            alert(&quot;POST请求到的数据：&quot; + result);</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        error: function(msg)&#123;</span><br><span class=\"line\">                            alert(&quot;POST请求数据错误：&quot; + msg);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/script&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;button&gt;GET请求&lt;/button&gt;</span><br><span class=\"line\">        &lt;button&gt;POST请求&lt;/button&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "AJAX",
                "jQuery"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/04/jQuery%E7%AC%94%E8%AE%B004/",
            "url": "https://codingfxj.github.io/2021/06/04/jQuery%E7%AC%94%E8%AE%B004/",
            "title": "jQuery笔记04",
            "date_published": "2021-06-04T01:58:18.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"jQuery的API\"><a href=\"#jQuery的API\" class=\"headerlink\" title=\"jQuery的API\"></a>jQuery的API</h3><h4 id=\"文本值操作\"><a href=\"#文本值操作\" class=\"headerlink\" title=\"文本值操作\"></a>文本值操作</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>html([val|fn])</span><br><span class=\"line\">\t和原生JS中的innerHTML作用一样</span><br><span class=\"line\"><span class=\"number\">2.</span>text([val|fn])</span><br><span class=\"line\">\t和原生JS中的innerText作用一样</span><br><span class=\"line\"><span class=\"number\">3.</span>val([val|fn|arr])</span><br><span class=\"line\"></span><br><span class=\"line\"> $(<span class=\"string\">&quot;div&quot;</span>).html(<span class=\"string\">&quot;&lt;p&gt;我是段落&lt;span&gt;我是span&lt;/span&gt;&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\"> $(<span class=\"string\">&quot;div&quot;</span>).text(<span class=\"string\">&quot;&lt;p&gt;我是段落&lt;span&gt;我是span&lt;/span&gt;&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\"> $(<span class=\"string\">&quot;input&quot;</span>).val(<span class=\"string\">&quot;请输入内容&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"原生JS属性与属性节点操作\"><a href=\"#原生JS属性与属性节点操作\" class=\"headerlink\" title=\"原生JS属性与属性节点操作\"></a>原生JS属性与属性节点操作</h4><h6 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h6><blockquote>\n<p><strong>属性</strong>：对象身上保存的变量就是属性<br>操作属性：<br>            对象.属性名称 = 值;<br>            对象[“属性名称”] = 值;</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    p.name = <span class=\"string\">&quot;ls&quot;</span>;</span><br><span class=\"line\">    p[<span class=\"string\">&quot;name&quot;</span>] = <span class=\"string\">&quot;zs&quot;</span>;      </span><br></pre></td></tr></table></figure>\n<h6 id=\"属性节点\"><a href=\"#属性节点\" class=\"headerlink\" title=\"属性节点\"></a>属性节点</h6><blockquote>\n<p><strong>属性节点</strong>：DOM元素的attributes属性中保存的所有内容都是属性节点</p>\n<p><strong>操作属性节点</strong>：</p>\n<p> DOM元素.setAttribute(“属性名称”, “值”);<br> DOM元素.getAttribute(“属性名称”);</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input.setAttribute(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;search&quot;</span>);</span><br><span class=\"line\">input.getAttribute(<span class=\"string\">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h6 id=\"属性和属性节点区别：\"><a href=\"#属性和属性节点区别：\" class=\"headerlink\" title=\"属性和属性节点区别：\"></a>属性和属性节点区别：</h6><blockquote>\n<p> 任何对象都有属性, 但是只有DOM对象才有属性节点</p>\n</blockquote>\n<h4 id=\"jQuery属性和属性节点操作\"><a href=\"#jQuery属性和属性节点操作\" class=\"headerlink\" title=\"jQuery属性和属性节点操作\"></a>jQuery属性和属性节点操作</h4><h6 id=\"属性节点获取与赋值\"><a href=\"#属性节点获取与赋值\" class=\"headerlink\" title=\"属性节点获取与赋值\"></a>属性节点获取与赋值</h6><blockquote>\n<p><strong>attr(name | pro | key,val | fn)、prop()</strong><br>            <strong>作用</strong>: 获取或者设置属性节点的值<br>            可以传递一个或多个参数<br>            传递一个参数, <strong>获取</strong>属性节点的值<br>            传递两个参数, <strong>设置</strong>属性节点的值</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;span&quot;</span>).attr(<span class=\"string\">&quot;class&quot;</span>, <span class=\"string\">&quot;box&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;span&quot;</span>).prop(<span class=\"string\">&quot;demo&quot;</span>, <span class=\"string\">&quot;it666&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>注意点:</strong></p>\n<blockquote>\n<p> 如果是获取:无论找到多少个元素, 都只会返回第一个元素指定的属性节点的值<br> 如果是设置:找到多少个元素就会设置多少个元素<br> 如果是设置: 设置的属性节点不存在, 那么系统会自动新增</p>\n</blockquote>\n<h6 id=\"删除属性节点\"><a href=\"#删除属性节点\" class=\"headerlink\" title=\"删除属性节点\"></a>删除属性节点</h6><p>removeAttr(name)、removeProp()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;span&quot;).removeAttr(&quot;class name&quot;);\t// 删除class和name属性节点（会删除所有找到元素指定的属性节点）</span><br><span class=\"line\"> $(&quot;span&quot;).removeProp(&quot;demo&quot;)</span><br></pre></td></tr></table></figure>\n<p><strong>prop()与attr()</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;input&quot;</span>).prop(<span class=\"string\">&quot;checked&quot;</span>)); <span class=\"comment\">// true / false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;input&quot;</span>).attr(<span class=\"string\">&quot;checked&quot;</span>)); <span class=\"comment\">// checked / undefined</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>prop方法不仅能够操作属性, 他还能操作属性节点</p>\n<p>在操作属性节点时,具有 true 和 false 两个属性的属性节点，如 checked, selected 或者 disabled 推荐使用prop()，</p>\n<p>其他的使用 attr()</p>\n</blockquote>\n<h4 id=\"操作类相关方法\"><a href=\"#操作类相关方法\" class=\"headerlink\" title=\"操作类相关方法\"></a>操作类相关方法</h4><blockquote>\n<p>addClass(class|fn)    添加一个类，添加多个, 多个类名之间用空格隔开</p>\n<p>removeClass([class|fn])     删除一个类，除多个, 多个类名之间用空格隔开</p>\n<p>toggleClass(class|fn[,sw])     有就删除, 没有就添加</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;div&quot;).addClass(&quot;class1 class2&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(&quot;div&quot;).removeClass(&quot;class2 class1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(&quot;div&quot;).toggleClass(&quot;class2 class1&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"操作CSS样式\"><a href=\"#操作CSS样式\" class=\"headerlink\" title=\"操作CSS样式\"></a>操作CSS样式</h4><h6 id=\"逐个设置\"><a href=\"#逐个设置\" class=\"headerlink\" title=\"逐个设置\"></a>逐个设置</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).css(<span class=\"string\">&quot;width&quot;</span>, <span class=\"string\">&quot;100px&quot;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).css(<span class=\"string\">&quot;height&quot;</span>, <span class=\"string\">&quot;100px&quot;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).css(<span class=\"string\">&quot;background&quot;</span>, <span class=\"string\">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h6 id=\"链式设置\"><a href=\"#链式设置\" class=\"headerlink\" title=\"链式设置\"></a>链式设置</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;div&quot;).css(&quot;width&quot;, &quot;100px&quot;).css(&quot;height&quot;, &quot;100px&quot;).css(&quot;background&quot;, &quot;blue&quot;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"批量设置\"><a href=\"#批量设置\" class=\"headerlink\" title=\"批量设置\"></a>批量设置</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).css(&#123;</span><br><span class=\"line\">       <span class=\"attr\">width</span>: <span class=\"string\">&quot;100px&quot;</span>,</span><br><span class=\"line\">       <span class=\"attr\">height</span>: <span class=\"string\">&quot;100px&quot;</span>,</span><br><span class=\"line\">       <span class=\"attr\">background</span>: <span class=\"string\">&quot;red&quot;</span></span><br><span class=\"line\">     &#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"样式获取\"><a href=\"#样式获取\" class=\"headerlink\" title=\"样式获取\"></a>样式获取</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log($(&quot;div&quot;).css(&quot;background&quot;));</span><br></pre></td></tr></table></figure>\n<h4 id=\"位置与尺寸相关方法\"><a href=\"#位置与尺寸相关方法\" class=\"headerlink\" title=\"位置与尺寸相关方法\"></a>位置与尺寸相关方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//获取视口区的宽高：</span></span><br><span class=\"line\">  <span class=\"number\">1</span>、$(<span class=\"built_in\">window</span>).height()</span><br><span class=\"line\">  <span class=\"number\">2</span>、$(<span class=\"built_in\">window</span>).width()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取内容区的宽高：</span></span><br><span class=\"line\">     $(<span class=\"string\">&#x27;div&#x27;</span>).width(); </span><br><span class=\"line\">     $(<span class=\"string\">&#x27;div&#x27;</span>).height();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取内容+padding区的宽高：</span></span><br><span class=\"line\">  <span class=\"number\">3</span>、$(<span class=\"string\">&#x27;div&#x27;</span>).innerHeight()</span><br><span class=\"line\">  <span class=\"number\">4</span>、$(<span class=\"string\">&#x27;div&#x27;</span>).innerWidth()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取内容+padding+border区的宽高：</span></span><br><span class=\"line\">  <span class=\"number\">5</span>、$(<span class=\"string\">&#x27;div&#x27;</span>).outerHeight()</span><br><span class=\"line\">  <span class=\"number\">6</span>、$(<span class=\"string\">&#x27;div&#x27;</span>).outerWidth()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取内容+padding+border+margin区的宽高： </span></span><br><span class=\"line\">   $(<span class=\"string\">&#x27;div&#x27;</span>).outerWidth(<span class=\"literal\">true</span>); </span><br><span class=\"line\">   $(<span class=\"string\">&#x27;div&#x27;</span>).outerHeight(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取相对于文档的偏移，即距离窗口的偏移位</span></span><br><span class=\"line\">  <span class=\"number\">7</span>、.offset()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//获取相对于定位父元素的偏移</span></span><br><span class=\"line\">  <span class=\"number\">8</span>、.position()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//横向滚动条左侧的偏移</span></span><br><span class=\"line\">  <span class=\"number\">9</span>、.scrollLeft()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//横向滚动条上侧的偏移</span></span><br><span class=\"line\">  <span class=\"number\">10</span>、.scrollTop()</span><br><span class=\"line\">兼容写法: $(<span class=\"string\">&quot;body&quot;</span>).scrollTop()+$(<span class=\"string\">&quot;html&quot;</span>).scrollTop()</span><br><span class=\"line\">  <span class=\"comment\">//获取离它最近的父定位元素  </span></span><br><span class=\"line\">   $(<span class=\"string\">&quot;html,body&quot;</span>).scrollTop(<span class=\"number\">300</span>);<span class=\"comment\">//设置滚动偏移距离</span></span><br><span class=\"line\">  <span class=\"number\">11</span>、.offsetParent()</span><br></pre></td></tr></table></figure>\n<h4 id=\"动画效果\"><a href=\"#动画效果\" class=\"headerlink\" title=\"动画效果\"></a>动画效果</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>基本效果</span><br><span class=\"line\">  <span class=\"number\">1</span>）隐藏 hide()\t</span><br><span class=\"line\">  <span class=\"number\">2</span>）显示 show()</span><br><span class=\"line\">  <span class=\"number\">3</span>）隐藏与显示 toggle()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>淡入淡出效果</span><br><span class=\"line\">  <span class=\"number\">1</span>）淡入  fadeIn()</span><br><span class=\"line\">  <span class=\"number\">2</span>）淡出  fadeOut()</span><br><span class=\"line\">  <span class=\"number\">3</span>）淡入到 fadeTo()</span><br><span class=\"line\">  <span class=\"number\">4</span>）淡入与淡出 fadeToggle()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>滑动效果</span><br><span class=\"line\">  <span class=\"number\">1</span>）滑下 slideDown()</span><br><span class=\"line\">  <span class=\"number\">2</span>）滑上 slideUp()</span><br><span class=\"line\">  <span class=\"number\">3</span>）滑上与滑下 slideToggle()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4.</span>自定义动画</span><br><span class=\"line\">  animate()    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传参形式：hide(speed,fn)</span></span><br><span class=\"line\"><span class=\"comment\">//speed参数可为预定值(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)动画时长的毫秒数值(如：1000)</span></span><br><span class=\"line\"><span class=\"comment\">//例:</span></span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $(<span class=\"string\">&quot;div&quot;</span>).fadeIn(<span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;淡入完毕&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>自定义动画 animate()</strong> </p>\n<blockquote>\n<p><strong>animate( params, [speed], [easing], [fn])</strong></p>\n<p><strong>params:</strong>  一组包含作为动画属性和终值的样式属性和及其值的集合，多个属性的动画也会同时执行<br><strong>speed</strong>:  指定动画时长(预定值：”slow”,”normal”, or “fast”)或毫秒数<br><strong>easing</strong>:  指定动画节奏, 默认就是swing （linear：匀速）<br><strong>fn</strong>:  动画执行完毕之后的回调函数，每个元素执行一次。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#go&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  \t$(<span class=\"string\">&quot;#block&quot;</span>).animate(&#123; </span><br><span class=\"line\">  \t \t <span class=\"attr\">width</span>: <span class=\"string\">&quot;90%&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"string\">&quot;100%&quot;</span>, </span><br><span class=\"line\">   \t \t<span class=\"attr\">fontSize</span>: <span class=\"string\">&quot;10em&quot;</span>, </span><br><span class=\"line\">   \t\t <span class=\"attr\">borderWidth</span>: <span class=\"number\">10</span></span><br><span class=\"line\"> \t &#125;, <span class=\"number\">1000</span>,<span class=\"string\">&quot;linear&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   \t\t  alert(<span class=\"string\">&quot;自定义动画执行完毕&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>delap方法：延迟动画执行</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;.one&quot;</span>).animate(&#123;</span><br><span class=\"line\">       <span class=\"attr\">width</span>: <span class=\"number\">500</span> </span><br><span class=\"line\">   &#125;, <span class=\"number\">1000</span>).delay(<span class=\"number\">2000</span>).animate(&#123;</span><br><span class=\"line\">        <span class=\"attr\">height</span>: <span class=\"number\">500</span></span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>stop方法：停止动画执行</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">立即停止当前动画, 继续执行后续的动画</span><br><span class=\"line\">   $(<span class=\"string\">&quot;div&quot;</span>).stop();</span><br><span class=\"line\">   $(<span class=\"string\">&quot;div&quot;</span>).stop(<span class=\"literal\">false</span>);</span><br><span class=\"line\">   $(<span class=\"string\">&quot;div&quot;</span>).stop(<span class=\"literal\">false</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">立即停止当前和后续所有的动画</span><br><span class=\"line\">   $(<span class=\"string\">&quot;div&quot;</span>).stop(<span class=\"literal\">true</span>);</span><br><span class=\"line\">   $(<span class=\"string\">&quot;div&quot;</span>).stop(<span class=\"literal\">true</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">立即完成当前的, 继续执行后续动画</span><br><span class=\"line\">   $(<span class=\"string\">&quot;div&quot;</span>).stop(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">立即完成当前的, 并且停止后续所有的</span><br><span class=\"line\">   $(<span class=\"string\">&quot;div&quot;</span>).stop(<span class=\"literal\">true</span>, <span class=\"literal\">true</span>);   </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "jQuery"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/04/jQuery%E7%AC%94%E8%AE%B003/",
            "url": "https://codingfxj.github.io/2021/06/04/jQuery%E7%AC%94%E8%AE%B003/",
            "title": "jQuery笔记03",
            "date_published": "2021-06-04T01:04:40.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"jQuery的事件\"><a href=\"#jQuery的事件\" class=\"headerlink\" title=\"jQuery的事件\"></a>jQuery的事件</h3><h4 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on()</span><br><span class=\"line\">   在选定的元素上绑定一个或多个事件处理函数。</span><br><span class=\"line\">off()</span><br><span class=\"line\">   移除一个事件处理函数。</span><br><span class=\"line\">trigger()</span><br><span class=\"line\">   根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为。</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件的绑定\"><a href=\"#事件的绑定\" class=\"headerlink\" title=\"事件的绑定\"></a><strong>事件的绑定</strong></h4><blockquote>\n<p> jQuery中有两种绑定事件方式</p>\n<p>​      1.eventName(fn);</p>\n<p>​      编码效率略高/ 部分事件jQuery没有实现,所以不能添加</p>\n<p>​      2.on(eventName, fn);</p>\n<p>​      编码效率略低/ 所有js事件都可以添加</p>\n<p>​      注意:</p>\n<p>​      可以添加多个相同或者不同类型的事件,不会覆盖</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;button&quot;).click(function () &#123;</span><br><span class=\"line\">    alert(&quot;hello jQuery&quot;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   </span><br><span class=\"line\">$(&quot;button&quot;).on(&quot;click&quot;, function () &#123;</span><br><span class=\"line\">        alert(&quot;hello jQuery&quot;);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件移除\"><a href=\"#事件移除\" class=\"headerlink\" title=\"事件移除\"></a><strong>事件移除</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;button&quot;).off(); \t\t//如果不传递参数, 会移除所有的事件</span><br><span class=\"line\">$(&quot;button&quot;).off(&quot;click&quot;);\t//如果传递两个参数, 会移除所有指定类型的指定事件</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件冒泡与默认行为\"><a href=\"#事件冒泡与默认行为\" class=\"headerlink\" title=\"事件冒泡与默认行为\"></a>事件冒泡与默认行为</h4><blockquote>\n<p>事件冒泡：事件开始时由最具体的元素（文档中嵌套最深的那个元素）接收，然后逐级向上传播到较不为具体的节点</p>\n<p>默认行为：网页元素，都有自己的默认行为，例如，单击超链接会跳转…</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.stopPropagation();\t//阻止事件冒泡</span><br><span class=\"line\">event.preventDefault();\t\t//阻止默认行为</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装事件冒泡函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stopPropagation</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> e = <span class=\"built_in\">window</span>.event || e;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.all)&#123;\t\t<span class=\"comment\">//判断浏览器是否是IE</span></span><br><span class=\"line\">          e.cancelBubble = <span class=\"literal\">true</span>;<span class=\"comment\">//IE：cancelBubble</span></span><br><span class=\"line\">     &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          e.stopPropagation();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"自动触发\"><a href=\"#自动触发\" class=\"headerlink\" title=\"自动触发\"></a>自动触发</h4><blockquote>\n<p><strong>区别</strong></p>\n<p>trigger: 会触发事件冒泡，会触发默认行为</p>\n<p>triggerHandler:  不会触发事件冒泡，不会触发默认行为</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.box&quot;).trigger(&quot;click&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(&quot;.box&quot;).triggerHandler(&quot;click&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h4><blockquote>\n<p>想要自定义事件, 必须满足两个条件</p>\n<p>​      1.事件必须是通过on绑定的</p>\n<p>​      2.事件必须通过triggerHandler来触发</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.box&quot;).on(&quot;myClick&quot;, function () &#123;</span><br><span class=\"line\">       alert(&quot;box&quot;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">$(&quot;.box&quot;).triggerHandler(&quot;myClick&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件的命名空间\"><a href=\"#事件的命名空间\" class=\"headerlink\" title=\"事件的命名空间\"></a>事件的命名空间</h4><blockquote>\n<p>想要<strong>事件的命名空间有效</strong>，必须满足两个条件</p>\n<p>​      1.事件是通过on来绑定的</p>\n<p>​      2.通过trigger触发事件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;.box&quot;).on(&quot;click.zs&quot;, function () &#123;</span><br><span class=\"line\">      alert(&quot;click zs&quot;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">     </span><br><span class=\"line\"> $(&quot;.box&quot;).on(&quot;click.ls&quot;, function () &#123;</span><br><span class=\"line\">   alert(&quot;click ls&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(&quot;.box&quot;).trigger(&quot;click.zs&quot;);</span><br><span class=\"line\">$(&quot;.box&quot;).trigger(&quot;click.ls&quot;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注意</strong></p>\n<p>​    trigger触发子元素带命名空间的事件, 父元素带相同命名空间的事件也会被触发.</p>\n<p>而父元素没有命名空间的事件不会被触发</p>\n<p>​    trigger触发子元素不带命名空间的事件,子元素所有相同类型的事件和父元素所有相同类型的事件都会被触发</p>\n</blockquote>\n<h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。</p>\n<blockquote>\n<p>理解：</p>\n<p>有几个同事预计会在周一收到快递。为签收快递</p>\n<p>有两种办法：一是几个人在公司门口等快递；二是委托给前台MM代为签收。</p>\n<p>前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。</p>\n<p>内含另两层意思：</p>\n<p>第一，现在委托前台的同事是可以代为签收的，即程序中的现有的dom节点是有事件的；</p>\n<p>第二，新员工也是可以被前台MM代为签收的，即程序中新添加的dom节点也是有事件的。</p>\n</blockquote>\n<p>事件委托意义：</p>\n<blockquote>\n<p>每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大</p>\n<p>可以只对父级对象进行操作，这样节省内存空间</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 添加委托</span><br><span class=\"line\"> $(&quot;ul&quot;).delegate(&quot;li&quot;, &quot;click&quot;, fn)</span><br><span class=\"line\"> </span><br><span class=\"line\"> 删除由 delegate() 方法添加的所有事件委托</span><br><span class=\"line\">$(&quot;ul&quot;).undelegate();</span><br><span class=\"line\">$(&quot;ul&quot;).undelegate( &quot;click&quot; )</span><br></pre></td></tr></table></figure>\n<h4 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">click()  单击</span><br><span class=\"line\">dblclick()  双击</span><br><span class=\"line\">hover()   悬停  参数为两个函数hover(over,out) </span><br><span class=\"line\">mousedown()  按下</span><br><span class=\"line\">mouseup()  抬起</span><br><span class=\"line\">mousemove()  移动</span><br><span class=\"line\">mouseenter()  移入  事件不冒泡</span><br><span class=\"line\">mouseleave()  离开  事件不冒泡</span><br><span class=\"line\">  </span><br><span class=\"line\">mouseover()  进入   事件冒泡</span><br><span class=\"line\">mouseout()   离开   事件冒泡</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>mouseover/mouseout：子元素被移入移出也会触发父元素的事件（<strong>事件冒泡</strong>）</p>\n<p>mouseenter/mouseleave：子元素被移入移出不会触发父元素的事件（推荐使用）（<strong>事件不冒泡</strong>）</p>\n</blockquote>\n<h4 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a><strong>键盘事件</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keypress()   按键按下</span><br><span class=\"line\">keyup()   \t按键抬起</span><br><span class=\"line\">keydown()    按键按下</span><br></pre></td></tr></table></figure>\n<h4 id=\"表单事件\"><a href=\"#表单事件\" class=\"headerlink\" title=\"表单事件\"></a>表单事件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">focus()   聚焦事件</span><br><span class=\"line\">blur()    失去焦点事件</span><br><span class=\"line\">change()  当元素的值发生改变时激发的事件</span><br><span class=\"line\">select()  当textarea或文本类型的input元素中的文本被选择时触发的事件</span><br><span class=\"line\">submit()  表单提交事件，绑定在form上</span><br></pre></td></tr></table></figure>\n<h4 id=\"window事件\"><a href=\"#window事件\" class=\"headerlink\" title=\"window事件\"></a><strong>window事件</strong></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scroll( fn )    <span class=\"comment\">//滚动文档的可视部分时</span></span><br><span class=\"line\">unload( fn )    <span class=\"comment\">//用户退出页面</span></span><br><span class=\"line\">load( fn )      <span class=\"comment\">//某个页面或图像被完成加载</span></span><br><span class=\"line\">error( )        <span class=\"comment\">//当加载文档或图像时发生某个错误</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "jQuery"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/04/jQuery%E7%AC%94%E8%AE%B002/",
            "url": "https://codingfxj.github.io/2021/06/04/jQuery%E7%AC%94%E8%AE%B002/",
            "title": "jQuery笔记02",
            "date_published": "2021-06-04T00:40:26.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"jQuery选择器\"><a href=\"#jQuery选择器\" class=\"headerlink\" title=\"jQuery选择器\"></a>jQuery选择器</h3><h4 id=\"1-基本选择器：\"><a href=\"#1-基本选择器：\" class=\"headerlink\" title=\"1.基本选择器：\"></a><strong><em>1.基本选择器：</em></strong></h4><blockquote>\n<p>   所有选择器      *<br>   标签选择器      标签名<br>   ID选择器          #id<br>   类选择器          .className<br>   群组选择器      .one, .two   多个选择器使用==逗号==分隔，取并集<br>   复合选择器      .one.two   多个选择器组合使用，取交集</p>\n</blockquote>\n<h4 id=\"2-层次选择器：\"><a href=\"#2-层次选择器：\" class=\"headerlink\" title=\"2.层次选择器：\"></a><strong><em>2.层次选择器：</em></strong></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后代选择器   <span class=\"selector-class\">.ancestors</span>  . posterity</span><br><span class=\"line\">   两个选择器使用空格隔开，表示可以获取当前元素的子代以及孙子代等等后代元素。</span><br><span class=\"line\">子代选择器   <span class=\"selector-class\">.parent</span>&gt;<span class=\"selector-class\">.son</span></span><br><span class=\"line\">   两个选择器使用&gt;隔开，表示只能获取当前选中元素的子代元素。</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-兄弟选择器：\"><a href=\"#3-兄弟选择器：\" class=\"headerlink\" title=\"3.兄弟选择器：\"></a><strong><em>3.兄弟选择器：</em></strong></h4><blockquote>\n<p>   下一个兄弟选择器   .one+.two<br>      两个选择器使用+隔开，表示可以获取当前元素的下一个兄弟元素，下一个兄弟元素要能符合.two。<br>   之后所有子代选择器  .one~.two<br>      两个选择器使用~隔开，表示可以获取当前元素之后的所有兄弟元素，只有所有兄弟元素要能符合.two。</p>\n</blockquote>\n<h4 id=\"4-后代选择器：\"><a href=\"#4-后代选择器：\" class=\"headerlink\" title=\"4.后代选择器：\"></a><strong><em>4.后代选择器：</em></strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector:nth-child(index)</span><br><span class=\"line\">    获取每个selector元素中索引为index的子元素。【注意】index从1开始</span><br><span class=\"line\">selector:first-child</span><br><span class=\"line\">    获取每一个selector元素中的第一个子元素（每个父元素的第一个子元素）</span><br><span class=\"line\">selector:last-child</span><br><span class=\"line\">    获取每一个selector元素中的最后一个子元素（每个父元素的最后一个子元素）</span><br><span class=\"line\">selector:only-child</span><br><span class=\"line\">    获取每一个selector元素中的独生子子元素（每个父元素如果只有一个孩子元素，获取该元素）</span><br><span class=\"line\">selector:first-of-type</span><br><span class=\"line\">    获取每个selector元素中每种类型子元素中的第一个</span><br><span class=\"line\">selector:last-of-type</span><br><span class=\"line\">    获取每个selector元素中每种类型子元素中的最后一个</span><br></pre></td></tr></table></figure>\n<h3 id=\"jQuery过滤器\"><a href=\"#jQuery过滤器\" class=\"headerlink\" title=\"jQuery过滤器\"></a>jQuery过滤器</h3><p>jQuery的过滤器必须用在jQuery选择器后，表示对通过前面的jQuery选择器选择到的内容的过滤。</p>\n<h4 id=\"1-基本过滤器：\"><a href=\"#1-基本过滤器：\" class=\"headerlink\" title=\"1.基本过滤器：\"></a><strong><em>1.基本过滤器：</em></strong></h4><blockquote>\n<p>  selector:first  获取所有已选择到的元素中的第一个元素<br>  selector:last   获取所有已选择到的元素中的最后一个元素<br>  selector:even    获取所有已选择到的元素中的索引为偶数的元素<br>  selector:odd     获取所有已选择到的元素中的索引为奇数的元素<br>  selector:eq(index) 获取所有已选择到的元素中的索引为index的元素<br>  selector:lt(num)   获取所有已选择到的元素中的索引值小于num的元素<br>  selector:gt(num)   获取所有已选择到的元素中的索引值大于num的元素<br>  selector1:not(selector2)  获取所有已选择到的元素中的除了selector2的元素<br>  selector:header   获取所有已选择到的元素中的标题元素(h1~h6)    </p>\n</blockquote>\n<h4 id=\"2-内容过滤器：\"><a href=\"#2-内容过滤器：\" class=\"headerlink\" title=\"2.内容过滤器：\"></a><strong><em>2.内容过滤器：</em></strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector:contains(text) </span><br><span class=\"line\">         获取所有已选择到的元素中文本包含text的元素</span><br><span class=\"line\">selector:empty   </span><br><span class=\"line\">         获取所有已选择到的元素中的空元素(没有子节点)</span><br><span class=\"line\">selector:parent  </span><br><span class=\"line\">         获取所有已选择到的元素中的非空元素(有子节点)，如$(&quot;div:parent&quot;);</span><br><span class=\"line\">selector1:has(selector2)  </span><br><span class=\"line\">         获取所有已选择到的元素中包含selector2的元素，如$(&quot;div:has(&#x27;span&#x27;)&quot;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-可见性过滤器：\"><a href=\"#3-可见性过滤器：\" class=\"headerlink\" title=\"3.可见性过滤器：\"></a><strong><em>3.可见性过滤器：</em></strong></h4><blockquote>\n<p> <strong>两种隐藏类型</strong> ：</p>\n<p> 1）不占据屏幕空间<br>        display:none;<br>        <input type=\"hidden\"><br>  2）占据屏幕空间<br>        visibility:hidden;<br>        opacity:0;//透明度为0<br>   <strong>使用</strong>：<br>      :visible   选择所有占据屏幕空间的元素<br>      :hidden    选择所有不占据屏幕空间的元素  </p>\n</blockquote>\n<h4 id=\"4-属性过滤器：\"><a href=\"#4-属性过滤器：\" class=\"headerlink\" title=\"4.属性过滤器：\"></a><strong><em>4.属性过滤器：</em></strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selector[attrKey]  </span><br><span class=\"line\">        获取所有已选择到的元素中具有属性attrKey的元素</span><br><span class=\"line\">selector[attrKey=attrVal]    </span><br><span class=\"line\">        获取所有已选择到的元素中具有属性attrKey，并且属性值为attrVal的元素</span><br><span class=\"line\">selector[attrKey^=attrVal]  </span><br><span class=\"line\">        获取所有已选择到的元素中具有属性attrKey，并且属性值为以attrVal开头的元素</span><br><span class=\"line\">selector[attrKey$=attrVal]  </span><br><span class=\"line\">        获取所有已选择到的元素中具有属性attrKey，并且属性值为以attrVal结尾的元素</span><br><span class=\"line\">selector[attrKey*=attrVal]  </span><br><span class=\"line\">        获取所有已选择到的元素中具有属性attrKey，并且属性值为包含attrVal的元素</span><br><span class=\"line\">selector[attrKey!=attrVal]  </span><br><span class=\"line\">        获取所有已选择到的元素中具有属性attrKey，并且属性值不为以attrVal的元素或者没有属性attrVal的元素</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-表单过滤器：\"><a href=\"#5-表单过滤器：\" class=\"headerlink\" title=\"5.表单过滤器：\"></a><strong><em>5.表单过滤器：</em></strong></h4><blockquote>\n<p>   :checked    选取所有被选中的元素，用于复选框、单选框、下拉框</p>\n<p>   :selected   选取所有被选中的元素，该选择器只适用于<option></p>\n<p>   :focus   选取当前获取焦点的元素</p>\n<p>   :text    选取所有的单行文本框</p>\n<p>   :password  选取所有的密码框</p>\n<p>   :input     选取所有的input，textarea，selec，button元素</p>\n<p>   :enable   选取所有可用元素，该选择器仅可用于支持disable属性的html元素。</p>\n<p>   :disable   选取所有不可用元素，该选择器也仅可用于支持disable属性的html元素。</p>\n<p>:radio      选取所有的单选框</p>\n<p>:checkbox   选取所有的多选框</p>\n<p> :submit     选取所有的提交按钮</p>\n<p> :image      选取所有的input类型为image的表单元素</p>\n<p> :reset   选取所有的input类型为reset的表单元素</p>\n<p> :button  选取所有的input类型为button的表单元素</p>\n<p> :file    选取所有的input类型为file的表单元素</p>\n</blockquote>\n<h3 id=\"Dom操作\"><a href=\"#Dom操作\" class=\"headerlink\" title=\"Dom操作\"></a>Dom操作</h3><h4 id=\"1-查找节点\"><a href=\"#1-查找节点\" class=\"headerlink\" title=\"1.查找节点\"></a>1.查找节点</h4><p>通过jQuery选择器来完成</p>\n<h4 id=\"2-创建节点\"><a href=\"#2-创建节点\" class=\"headerlink\" title=\"2.创建节点\"></a><strong>2.创建节点</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建元素节点：var newTd = $(&quot;&lt;td&gt;&lt;/td&gt;&quot;)</span><br><span class=\"line\">创建文本节点：var newTd = $(&quot;&lt;td&gt;文本内容&lt;/td&gt;&quot;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-插入节点\"><a href=\"#3-插入节点\" class=\"headerlink\" title=\"3.插入节点\"></a><strong>3.插入节点</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) $A.append(B)</span><br><span class=\"line\">     将B追加到A的末尾处，作为它的最后一个子元素</span><br><span class=\"line\">2) $A.appendTo(B)</span><br><span class=\"line\">     将A追加到B的末尾，作为它的最后一个子元素</span><br><span class=\"line\">3) prepend() </span><br><span class=\"line\">     $A.prependTo(B)</span><br><span class=\"line\">          将A追加到B的前面，作为它的第一个子元素</span><br><span class=\"line\">     $A.after(B)</span><br><span class=\"line\">          在A之后追加B，作为它的兄弟元素</span><br><span class=\"line\">     $A.insertAfter(B)</span><br><span class=\"line\">          在B之后追加A，作为它的兄弟元素</span><br><span class=\"line\">     $A.before(B)</span><br><span class=\"line\">          在A之前追加B，作为它的兄弟元素</span><br><span class=\"line\">     $A.insertBefore(B)</span><br><span class=\"line\">           在B之前追加A，作为它的兄弟元素</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-删除节点\"><a href=\"#4-删除节点\" class=\"headerlink\" title=\"4.删除节点\"></a><strong>4.删除节点</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remove([selector])</span><br><span class=\"line\">    从DOM中删除所有匹配的元素，返回值是一个指向已经被删除的节点的引用，可以在以后再使用这些元素。</span><br><span class=\"line\">    该方法会移除元素，同时也会移除元素内部的一切，包括绑定的事件及与该元素相关的jQuery数据。</span><br><span class=\"line\">detach([selector])</span><br><span class=\"line\">    与remove()类似，但是detach()保存所有jQuery数据和被移走的元素的相关联事件。</span><br><span class=\"line\">empty()</span><br><span class=\"line\">    无参数。从DOM中清空集合中匹配元素的所有的子节点。</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-复制节点\"><a href=\"#5-复制节点\" class=\"headerlink\" title=\"5.复制节点\"></a><strong>5.复制节点</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#id&quot;).clone(false);</span><br><span class=\"line\"> 该方法返回的是一个节点的引用，参数默认为false，为浅复制；</span><br><span class=\"line\"> 参数是true,为深复制，含义是：复制元素的同时复制元素中所绑定的事件。</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-替换节点\"><a href=\"#6-替换节点\" class=\"headerlink\" title=\"6.替换节点\"></a><strong>6.替换节点</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replaceWith(newContent);</span><br><span class=\"line\">     用新内容替换集合中所有匹配的元素，并且返回被删除的元素的集合。</span><br><span class=\"line\">     该方法会删除与节点相关联的所有数据和事件处理程序。</span><br><span class=\"line\">replaceAll(target);</span><br><span class=\"line\">     用集合的匹配元素替换每个目标元素。颠倒了replaceWith()操作效果。</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-包裹节点\"><a href=\"#7-包裹节点\" class=\"headerlink\" title=\"7.包裹节点\"></a><strong>7.包裹节点</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wrap([wrappingElement])</span><br><span class=\"line\">     在每个匹配的元素外层包上一个html元素</span><br><span class=\"line\">warpAll([wrappingElement])</span><br><span class=\"line\">     将所有匹配的元素用一个元素来包裹，在所有匹配元素外面包裹一层HTML结构</span><br><span class=\"line\">warpInner([wrappingElement])</span><br><span class=\"line\">     每个匹配元素里面内容(子元素)都会被这种结构包裹</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-节点遍历\"><a href=\"#8-节点遍历\" class=\"headerlink\" title=\"8.节点遍历\"></a><strong>8.节点遍历</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">children([selector]) </span><br><span class=\"line\">     用于取得匹配元素的子元素集合(只考虑子元素而不考虑任何后代元素)</span><br><span class=\"line\">   $(&#x27;.content.inner&#x27;)=&gt;$(&#x27;.content&#x27;).children(&#x27;.inner&#x27;);  </span><br><span class=\"line\">find(selector)</span><br><span class=\"line\">     在当前对象元素中的子元素查找，和参数所匹配的所有的后代元素</span><br><span class=\"line\">next([selector])</span><br><span class=\"line\">     取得匹配的元素集合中每一个元素紧邻的后面兄弟元素</span><br><span class=\"line\">nextAll([selector])</span><br><span class=\"line\">     查找当前元素之后所有的同辈元素</span><br><span class=\"line\">prev([selector])</span><br><span class=\"line\">      取得匹配元素前面紧邻的兄弟元素</span><br><span class=\"line\">prevAll([selector])</span><br><span class=\"line\">      取得当前元素之前所有的同辈元素</span><br><span class=\"line\">silibinng([selector])</span><br><span class=\"line\">      取得匹配元素的前后所有的兄弟元素</span><br><span class=\"line\">closest(selector)</span><br><span class=\"line\">      取得和参数匹配的最近的元素，如果匹配不上继续向上查找父元素</span><br><span class=\"line\">filter(selector)</span><br><span class=\"line\">      把当前所选择的所有元素再进行筛选过滤</span><br><span class=\"line\">parent([selector])</span><br><span class=\"line\">      取得匹配元素的集合中，每个元素的父元素</span><br><span class=\"line\">parents([selector])</span><br><span class=\"line\">      获得集合中每个匹配元素的祖先元素</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "jQuery"
            ]
        },
        {
            "id": "https://codingfxj.github.io/2021/06/04/jQuery%E7%AC%94%E8%AE%B001/",
            "url": "https://codingfxj.github.io/2021/06/04/jQuery%E7%AC%94%E8%AE%B001/",
            "title": "jQuery笔记01",
            "date_published": "2021-06-04T00:38:48.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\css\\APlayer.min.css\"><script src=\"\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\js\\Meting.min.js\"></script><h3 id=\"初识jQuery\"><a href=\"#初识jQuery\" class=\"headerlink\" title=\"初识jQuery\"></a>初识jQuery</h3><p><strong>一个优秀的JavaScript库</strong></p>\n<p>jQuery封装了很多预定义的对象和函数，jQuery本质上也是一个函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> <span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span> </span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"> &#125;)( <span class=\"built_in\">window</span> );</span><br></pre></td></tr></table></figure>\n<h4 id=\"jQuery的特性\"><a href=\"#jQuery的特性\" class=\"headerlink\" title=\"jQuery的特性\"></a>jQuery的特性</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">功能:</span><br><span class=\"line\">     HTML元素选取</span><br><span class=\"line\">     HTML元素操作</span><br><span class=\"line\">     CSS操作</span><br><span class=\"line\">     HTML事件函数</span><br><span class=\"line\">     JavaScript特效和动画</span><br><span class=\"line\">     HTML DOM遍历和修改</span><br><span class=\"line\">     AJAX</span><br><span class=\"line\">     Utilities</span><br></pre></td></tr></table></figure>\n<p><strong>jQuery的使用方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;jquery-3.3.1/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"jQuery入口函数\"><a href=\"#jQuery入口函数\" class=\"headerlink\" title=\"jQuery入口函数\"></a>jQuery入口函数</h3><h4 id=\"jQuery与原生JS入口函数\"><a href=\"#jQuery与原生JS入口函数\" class=\"headerlink\" title=\"jQuery与原生JS入口函数\"></a>jQuery与原生JS入口函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.原生JS的固定写法</span></span><br><span class=\"line\">   <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.jQuery的固定写法</span></span><br><span class=\"line\">   $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);    </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>原生JS和jQuery入口函数的加载模式不同</strong></p>\n</blockquote>\n<p>  <strong>原生JS</strong>:</p>\n<pre><code> 1. 会等到DOM元素加载完毕,并且图片也加载完毕才会执行   \n\n 2. 通过原生的JS入口函数可以拿到DOM元素的宽高\n\n 3. 原生的JS如果编写了多个入口函数,后面编写的会覆盖前面编写的        \n</code></pre><p>  <strong>jQuery</strong>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> 会等到DOM元素加载完毕,但不会等到图片也加载完毕就会执行</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span> 通过jQuery入口函数不可以拿到DOM元素的宽高</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span> jQuery中编写多个入口函数,后面的不会覆盖前面的</span><br></pre></td></tr></table></figure>\n<h4 id=\"jQuery入口函数的四种写法\"><a href=\"#jQuery入口函数的四种写法\" class=\"headerlink\" title=\"jQuery入口函数的四种写法\"></a>jQuery入口函数的四种写法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.第一种写法</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// alert(&quot;hello jQuery&quot;);</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.第二种写法</span></span><br><span class=\"line\">jQuery(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// alert(&quot;hello jQuery&quot;);</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.第三种写法(推荐)</span></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// alert(&quot;hello jQuery&quot;);</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.第四种写法</span></span><br><span class=\"line\">jQuery(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;hello jQuery&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"释放-的使用权\"><a href=\"#释放-的使用权\" class=\"headerlink\" title=\"释放$的使用权\"></a>释放$的使用权</h4><blockquote>\n<p>注意点: 释放操作必须在编写其它jQuery代码之前编写</p>\n<p>​              释放之后就不能再使用$,改为使用jQuery</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery原理：jQuery.noConflict();</span><br><span class=\"line\"></span><br><span class=\"line\">自定义一个访问符号</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fxj = jQuery.noConflict();\t\t\t</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fxj(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\talert(<span class=\"string\">&quot;hello jQuery&quot;</span>);</span><br><span class=\"line\">\t &#125;);</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"jQuery函数\"><a href=\"#jQuery函数\" class=\"headerlink\" title=\"jQuery函数\"></a>jQuery函数</h3><h4 id=\"jQuery函数具有四种参数：\"><a href=\"#jQuery函数具有四种参数：\" class=\"headerlink\" title=\"jQuery函数具有四种参数：\"></a>jQuery函数具有四种参数：</h4><blockquote>\n<p> jQuery库只提供了一个叫jQuery的函数，该函数中以及该元素的原型中定义了大量的方法。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>）选择器（字符串）</span><br><span class=\"line\">   jQuery函数通过该选择器获取对应的DOM，然后将这些DOM封装到一个人jQuery对象中并返回。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>）DOM对象（即Node实例）</span><br><span class=\"line\">    jQuery函数将该DOM封装成jQuery对象并返回。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>）HTML文本字符串</span><br><span class=\"line\">    jQuery函数根据传入的文本创建好HTML元素并封装成jQuery对象并返回。</span><br><span class=\"line\">     $(<span class=\"string\">&quot;&lt;div class=&quot;</span>one<span class=\"string\">&quot;&gt;one&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>）一个匿名函数    </span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;);</span><br><span class=\"line\">    当文当加载完毕之后jQuery函数调用匿名函数。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"jQuery对象（jquery函数返回值）\"><a href=\"#jQuery对象（jquery函数返回值）\" class=\"headerlink\" title=\"jQuery对象（jquery函数返回值）\"></a>jQuery对象（jquery函数返回值）</h4><p>jQuery对象是一个伪数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//什么是伪数组?</span></span><br><span class=\"line\"><span class=\"comment\">// 有0到length-1的属性, 并且有length属性 </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> $div = $(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log($div);</span><br></pre></td></tr></table></figure>\n<h4 id=\"原生Dom对象和jQuery对象区别\"><a href=\"#原生Dom对象和jQuery对象区别\" class=\"headerlink\" title=\"原生Dom对象和jQuery对象区别\"></a>原生Dom对象和jQuery对象区别</h4><p>​    <strong>联系</strong>—-两者之间可互相转换</p>\n<blockquote>\n<p>　1、jQuery对象可以通过jQuery包装DOM对象后产生；</p>\n<p>　　2、DOM对象也可以通过jQuery按索引取得；</p>\n</blockquote>\n<p>​    <strong>区别</strong>—-两个对象完全不同</p>\n<blockquote>\n<p>　　1、jQuery对象和原生JS中的dom对象两者对象类型，js原生获取的dom是一个对象，jQuery对象就是一个伪数组，两者不等价；</p>\n<p>　　2、jQuery无法使用DOM对象的任何方法，同理DOM对象也不能使用jQuery里的方法。</p>\n</blockquote>\n<h4 id=\"两者相互转换\"><a href=\"#两者相互转换\" class=\"headerlink\" title=\"两者相互转换\"></a>两者相互转换</h4><p><strong>原生DOM对象转jQuery对象</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(传入的原生对象); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;box&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> $box = $(box);</span><br></pre></td></tr></table></figure>\n<p><strong>jQuery对象转原生DOM对象</strong></p>\n<blockquote>\n<p>两种转换方式 [index] 和 .get(index)</p>\n<p>1.jQuery对象是一个伪数组对象，通过 [index] 的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> $box= $(<span class=\"string\">&quot;#box&quot;</span>) ;  <span class=\"comment\">// jQuery对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> box= $box[<span class=\"number\">0</span>];     <span class=\"comment\">// DOM对象</span></span><br></pre></td></tr></table></figure>\n<p>　　2.jQuery提供方法，通过 .get(index) 方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">var</span> $box= $(<span class=\"string\">&quot;#box&quot;</span>);\t\t<span class=\"comment\">// jQuery对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> box= $box.get(<span class=\"number\">0</span>); \t\t<span class=\"comment\">// DOM对象</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"jQuery工具方法\"><a href=\"#jQuery工具方法\" class=\"headerlink\" title=\"jQuery工具方法\"></a>jQuery工具方法</h3><h4 id=\"静态方法和实例方法\"><a href=\"#静态方法和实例方法\" class=\"headerlink\" title=\"静态方法和实例方法\"></a>静态方法和实例方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.定义一个类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AClass</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2.给这个类添加一个静态方法</span></span><br><span class=\"line\"><span class=\"comment\">// 直接添加给类的就是静态方法</span></span><br><span class=\"line\">AClass.staticMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> alert(<span class=\"string\">&quot;staticMethod&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3.静态方法通过类名调用</span></span><br><span class=\"line\">AClass.staticMethod();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.给这个类添加一个实例方法</span></span><br><span class=\"line\">    AClass.prototype.instanceMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;instanceMethod&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// 2.实例方法通过类的实例调用</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个实例(创建一个对象)</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> AClass();</span><br><span class=\"line\"><span class=\"comment\">// 3.通过实例调用实例方法</span></span><br><span class=\"line\">    a.instanceMethod();</span><br></pre></td></tr></table></figure>\n<h4 id=\"jQuery的静态方法each\"><a href=\"#jQuery的静态方法each\" class=\"headerlink\" title=\"jQuery的静态方法each\"></a>jQuery的静态方法each</h4><h6 id=\"原生的forEach\"><a href=\"#原生的forEach\" class=\"headerlink\" title=\"原生的forEach\"></a>原生的forEach</h6><blockquote>\n<p>第一个参数: 遍历到的元素<br>第二个参数: 当前遍历到的索引<br>注意点:<br>原生的forEach方法只能遍历数组, 不能遍历伪数组</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(index, value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(index, value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"jQuery的each\"><a href=\"#jQuery的each\" class=\"headerlink\" title=\"jQuery的each\"></a>jQuery的each</h6><blockquote>\n<p>第一个参数: 当前遍历到的索引<br>第二个参数: 遍历到的元素<br>注意点:<br> jQuery的each方法是可以遍历伪数组的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.each(arr, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index, value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(index, value);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> $.each(obj, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index, value</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(index, value);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"jQuery的静态方法map\"><a href=\"#jQuery的静态方法map\" class=\"headerlink\" title=\"jQuery的静态方法map\"></a>jQuery的静态方法map</h4><h6 id=\"原生map\"><a href=\"#原生map\" class=\"headerlink\" title=\"原生map\"></a>原生map</h6><blockquote>\n<p>第一个参数: 当前遍历到的元素<br>第二个参数: 当前遍历到的索引<br>第三个参数: 当前被遍历的数组<br>注意点:<br>和原生的forEach一样,不能遍历的伪数组</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> arr.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index, array</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(index, value, array);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">obj.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index, array</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(index, value, array);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"jQuery的map\"><a href=\"#jQuery的map\" class=\"headerlink\" title=\"jQuery的map\"></a>jQuery的map</h6><blockquote>\n<p>第一个参数: 要遍历的数组<br>第二个参数: 每遍历一个元素之后执行的回调函数<br>    回调函数的参数:<br>第一个参数: 遍历到的元素<br>第二个参数: 遍历到的索引<br>    注意点:<br>和jQuery中的each静态方法一样, map静态方法也可以遍历伪数组</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.map(arr, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(index, value);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = $.map(obj, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(index, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value + index;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"each和map静态方法的区别\"><a href=\"#each和map静态方法的区别\" class=\"headerlink\" title=\"each和map静态方法的区别\"></a>each和map静态方法的区别</h6><p><strong>返回值：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">each静态方法返回遍历的数组</span><br><span class=\"line\"></span><br><span class=\"line\">map静态方法默认的返回一个空数组</span><br></pre></td></tr></table></figure>\n<p><strong>回调函数</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">each静态方法不支持在回调函数中对遍历的数组进行处理</span><br><span class=\"line\"></span><br><span class=\"line\">map静态方法可以在回调函数中通过return对遍历的数组进行处理</span><br><span class=\"line\"></span><br><span class=\"line\">然后生成一个新的数组返回</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他静态方法\"><a href=\"#其他静态方法\" class=\"headerlink\" title=\"其他静态方法\"></a>其他静态方法</h4><blockquote>\n<p><strong>$.trim()</strong></p>\n<p>​        作用:  去除字符串两端的空格<br>​        参数:  需要去除空格的字符串<br>​        返回值:  去除空格之后的字符串</p>\n<p>​    <strong>$.isWindow();</strong></p>\n<p>​     作用: 判断传入的对象是否是window对象</p>\n<p>​     返回值: true/false</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w = <span class=\"built_in\">window</span>;\t </span><br><span class=\"line\"><span class=\"keyword\">var</span> res = $.isWindow(w);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>$.isArray();</strong></p>\n<p>作用: 判断传入的对象是否是真数组</p>\n<p>​    返回值: true/false</p>\n<p><strong>$.isFunction</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">作用: 判断传入的对象是否是一个函数</span><br><span class=\"line\"></span><br><span class=\"line\">返回值: <span class=\"literal\">true</span>/<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p><strong>$.holdReady(true);</strong> </p>\n<p>作用: 暂停ready执行</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.holdReady(true);</span><br><span class=\"line\"></span><br><span class=\"line\">$(document).ready(function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      alert(&quot;ready&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$.holdReady(false); \t//恢复ready事件</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "jQuery"
            ]
        }
    ]
}