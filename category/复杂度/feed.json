{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingFXJ'Blog • All posts by \"复杂度\" category",
    "description": "",
    "home_page_url": "https://CodingFXJ.github.io",
    "items": [
        {
            "id": "https://codingfxj.github.io/2021/05/30/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/",
            "url": "https://codingfxj.github.io/2021/05/30/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/",
            "title": "时间复杂度和空间复杂度",
            "date_published": "2021-05-30T15:50:58.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><ol>\n<li><p>算法执行时间与输入值n之间的关系。(算法的执行效率) </p>\n<blockquote>\n<p>最坏时间复杂度  </p>\n<p>平均时间复杂度</p>\n<p>计算出T(n)的数量级 : 忽略常量、低次幂和最高次幂的系数</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p><strong>O(1)(常数阶)&lt; O(logn)(对数阶) &lt; O(n)(线性阶) &lt; O(n2)(平方阶) &lt; O(n3)(立方阶) &lt; O(2^n) (指数阶)&lt;Ο(n!)</strong></p>\n</blockquote>\n<ol>\n<li><strong>大O符号表示法</strong>，即 T(n) = O(f(n))，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系。</li>\n</ol>\n<p>这个公式的全称是：<strong>算法的渐进时间复杂度</strong>。</p>\n<ol>\n<li>常见的时间复杂度量级有：</li>\n</ol>\n<blockquote>\n<p> 上面从上至下依次的时间复杂度越来越大，执行的效率越来越低。</p>\n</blockquote>\n<ul>\n<li>常数阶O(1)</li>\n<li>对数阶O(logN)</li>\n<li>线性阶O(n)</li>\n<li>线性对数阶O(nlogN)</li>\n<li>平方阶O(n²)</li>\n<li>立方阶O(n³)</li>\n<li>K次方阶O(n^k)</li>\n<li>指数阶(2^n)</li>\n</ul>\n<p><strong>常数阶O(1)</strong></p>\n<p>只要是没有循环等复杂结构，消耗的时间并不随着某个变量的增长而增长，那代码的时间复杂度就都是O(1)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = <span class=\"number\">1</span>;</span><br><span class=\"line\">int j = <span class=\"number\">2</span>;</span><br><span class=\"line\">++i;</span><br><span class=\"line\">j++;</span><br><span class=\"line\">int m = i + j;</span><br></pre></td></tr></table></figure>\n<p><strong>线性阶O(n)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; ++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   j = i;</span><br><span class=\"line\">   j++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>对数阶O(logN)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    i = i * <span class=\"number\">2</span>; <span class=\"comment\">//2*x*x*.. == n   ==&gt; x = log2^n</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>线性对数阶O(nlogN)</strong></p>\n<p>将时间复杂度为<code>O(logn)</code>的代码循环N遍，时间复杂度就是  <code>n * O(logN)==O(nlogN)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(m=<span class=\"number\">1</span>; m&lt;n; m++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i = i * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>平方阶O(n²)</strong></p>\n<p>把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(x=<span class=\"number\">1</span>; i&lt;=n; x++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       j = i;</span><br><span class=\"line\">       j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将其中一层循环的n改成m,时间复杂度就变成了 O(m*n)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(x=<span class=\"number\">1</span>; i&lt;=m; x++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       j = i;</span><br><span class=\"line\">       j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>立方阶O(n³)</strong>、<strong>K次方阶O(n^k)</strong></p>\n<p>嵌套三层或多层循环</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; i; j++)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"keyword\">for</span> (k = <span class=\"number\">0</span>; k &lt; j; k++)</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                   x++;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>空间复杂度是对一个算法在运行过程中<strong>临时占用存储空间大小</strong>的一个量度，用 S(n) 来定义</p>\n<ul>\n<li><p><strong>空间复杂度 O(1)</strong></p>\n<p>如果算法执行所需要的临时空间<strong>不随着</strong>某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i = <span class=\"number\">1</span>;</span><br><span class=\"line\">int j = <span class=\"number\">2</span>;</span><br><span class=\"line\">++i;</span><br><span class=\"line\">j++;</span><br><span class=\"line\">int m = i + j;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>空间复杂度 O(n)</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int[] m = <span class=\"keyword\">new</span> int[n]</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; ++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   j = i;</span><br><span class=\"line\">   j++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用递归算法求n的阶乘，递归的深度是n，每一层都会把信息存在递归栈里，空间复杂度O（n）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int <span class=\"function\"><span class=\"title\">fac</span>(<span class=\"params\">int n</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> fac(n - <span class=\"number\">1</span>)*n;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> <strong>O(1) &lt; O(n) &lt; O(n^2)</strong></p>\n</blockquote>\n<h3 id=\"排序算法复杂度\"><a href=\"#排序算法复杂度\" class=\"headerlink\" title=\"排序算法复杂度\"></a>排序算法复杂度</h3><p><img src=\"/images/paixu.png\" alt=\"\"></p>\n",
            "tags": [
                "算法",
                "复杂度"
            ]
        }
    ]
}